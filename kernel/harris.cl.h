static const char* harris_cl_source =
"const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE |                       \n"
"                          CLK_ADDRESS_CLAMP |                                 \n"
"                          CLK_FILTER_NEAREST;                                 \n"
"                                                                              \n"
"float gray(float4 v)                                                          \n"
"{                                                                             \n"
"  return 0.299f * v.x + 0.587f * v.y + 0.114f * v.z;                          \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void sobel(read_only  image2d_t input,                                 \n"
"                  write_only image2d_t sobelx,                                \n"
"                  write_only image2d_t sobely)                                \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float h = + 1.0f * gray(read_imagef(input, sampler, (int2)(x-1, y-1))) - 1.0f * gray(read_imagef(input, sampler, (int2)(x+1, y-1)))\n"
"            + 2.0f * gray(read_imagef(input, sampler, (int2)(x-1, y  ))) - 2.0f * gray(read_imagef(input, sampler, (int2)(x+1, y  )))\n"
"            + 1.0f * gray(read_imagef(input, sampler, (int2)(x-1, y+1))) - 1.0f * gray(read_imagef(input, sampler, (int2)(x+1, y+1)));\n"
"                                                                              \n"
"  float v = + 1.0f * gray(read_imagef(input, sampler, (int2)(x-1, y-1))) + 2.0f * gray(read_imagef(input, sampler, (int2)(x, y-1))) + 1.0f * gray(read_imagef(input, sampler, (int2)(x+1, y-1)))\n"
"            - 1.0f * gray(read_imagef(input, sampler, (int2)(x-1, y+1))) - 2.0f * gray(read_imagef(input, sampler, (int2)(x, y+1))) - 1.0f * gray(read_imagef(input, sampler, (int2)(x+1, y+1)));\n"
"                                                                              \n"
"  write_imagef(sobelx, (int2)(x, y), h);                                      \n"
"  write_imagef(sobely, (int2)(x, y), v);                                      \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void blurx(read_only  image2d_t sobelx,                                \n"
"                  read_only  image2d_t sobely,                                \n"
"                  write_only image2d_t blurxx_h,                              \n"
"                  write_only image2d_t blurxy_h,                              \n"
"                  write_only image2d_t bluryy_h,                              \n"
"                  constant float * gmask,                                     \n"
"                  int radius)                                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float vxx = 0.0f;                                                           \n"
"  float vxy = 0.0f;                                                           \n"
"  float vyy = 0.0f;                                                           \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      float sx = read_imagef(sobelx, sampler, (int2)(x+r, y)).x;              \n"
"      float sy = read_imagef(sobely, sampler, (int2)(x+r, y)).x;              \n"
"                                                                              \n"
"      vxx += gmask[r+radius] * (sx * sx);                                     \n"
"      vxy += gmask[r+radius] * (sx * sy);                                     \n"
"      vyy += gmask[r+radius] * (sy * sy);                                     \n"
"    }                                                                         \n"
"                                                                              \n"
"  write_imagef(blurxx_h, (int2)(x, y), (float4)(vxx));                        \n"
"  write_imagef(blurxy_h, (int2)(x, y), (float4)(vxy));                        \n"
"  write_imagef(bluryy_h, (int2)(x, y), (float4)(vyy));                        \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void cornerness(read_only  image2d_t blurxx_h,                         \n"
"                       read_only  image2d_t blurxy_h,                         \n"
"                       read_only  image2d_t bluryy_h,                         \n"
"                       write_only image2d_t corner,                           \n"
"                       constant float * gmask,                                \n"
"                       int radius,                                            \n"
"                       float threshold)                                       \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float vxx = 0.0f;                                                           \n"
"  float vxy = 0.0f;                                                           \n"
"  float vyy = 0.0f;                                                           \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      vxx += gmask[r+radius] * read_imagef(blurxx_h, sampler, (int2)(x, y+r)).x;\n"
"      vxy += gmask[r+radius] * read_imagef(blurxy_h, sampler, (int2)(x, y+r)).x;\n"
"      vyy += gmask[r+radius] * read_imagef(bluryy_h, sampler, (int2)(x, y+r)).x;\n"
"    }                                                                         \n"
"                                                                              \n"
"  float det = vxx * vyy - vxy * vxy;                                          \n"
"  float trace = vxx + vyy;                                                    \n"
"                                                                              \n"
"  const float k = 0.04f;                                                      \n"
"                                                                              \n"
"  float response = det - k * (trace * trace);                                 \n"
"                                                                              \n"
"  write_imagef(corner, (int2)(x, y), (response > threshold)? (float4)(response) : (float4)(-FLT_MAX));\n"
"}                                                                             \n"
"                                                                              \n"
"kernel void cornerness_suppress(read_only  image2d_t corner,                  \n"
"                                write_only image2d_t out)                     \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float corner_v = read_imagef(corner, sampler, (int2)(x, y)).x;              \n"
"                                                                              \n"
"  bool maximal = true;                                                        \n"
"  for (int yy=-1; yy<=1; yy++)                                                \n"
"    for (int xx=-1; xx<=1; xx++)                                              \n"
"      if (read_imagef(corner, sampler, (int2)(x+xx, y+yy)).x > corner_v)      \n"
"        maximal = false;                                                      \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), (maximal)? 1.0f : 0.0f);                    \n"
"}                                                                             \n"
;
