static const char* rgba_to_cielab_cl_source =
"                                                                              \n"
"__kernel void rgba_to_cielab(const __global float4 *input,                    \n"
"                                   __global float4 *output,                   \n"
"                                   int     width)                             \n"
"{                                                                             \n"
"    int x = get_global_id(0);                                                 \n"
"    int y = get_global_id(1);                                                 \n"
"                                                                              \n"
"    float4 in_v = input[y*width+x];                                           \n"
"                                                                              \n"
"    float R, G, B, X, Y, Z;                                                   \n"
"                                                                              \n"
"    R = in_v.x;                                                               \n"
"    G = in_v.y;                                                               \n"
"    B = in_v.z;                                                               \n"
"                                                                              \n"
"    if ( R > 0.04045f ) R = tgamma((R + 0.055f ) / 1.055f);                   \n"
"    else                R = R / 12.92f;                                       \n"
"    if ( G > 0.04045f ) G = tgamma((G + 0.055f ) / 1.055f );                  \n"
"    else                G = G / 12.92f;                                       \n"
"    if ( B > 0.04045f ) B = tgamma((B + 0.055f ) / 1.055f );                  \n"
"    else                B = B / 12.92f;                                       \n"
"                                                                              \n"
"    R = R * 100.0f;                                                           \n"
"    G = G * 100.0f;                                                           \n"
"    B = B * 100.0f;                                                           \n"
"                                                                              \n"
"    //Observer. = 2°, Illuminant = D65                                       \n"
"    X = R * 0.4124f + G * 0.3576f + B * 0.1805f;                              \n"
"    Y = R * 0.2126f + G * 0.7152f + B * 0.0722f;                              \n"
"    Z = R * 0.0193f + G * 0.1192f + B * 0.9505f;                              \n"
"                                                                              \n"
"    X = X / 95.047f;   //Observer= 2°, Illuminant= D65                       \n"
"    Y = Y / 100.000f;                                                         \n"
"    Z = Z / 108.883f;                                                         \n"
"                                                                              \n"
"    if ( X > 0.008856f ) X = cbrt(X);                                         \n"
"    else                 X = ( 7.787f * X ) + ( 16.0f / 116.0f );             \n"
"    if ( Y > 0.008856f ) Y = cbrt(Y);                                         \n"
"    else                 Y = ( 7.787f * Y ) + ( 16.0f / 116.0f );             \n"
"    if ( Z > 0.008856f ) Z = cbrt(Z);                                         \n"
"    else                 Z = ( 7.787f * Z ) + ( 16.0f / 116.0f );             \n"
"                                                                              \n"
"    float CIEL = ( 116.0f * Y ) - 16.0f;                                      \n"
"    float CIEa = 500.0f * ( X - Y );                                          \n"
"    float CIEb = 200.0f * ( Y - Z );                                          \n"
"                                                                              \n"
"    float4 out_v;                                                             \n"
"                                                                              \n"
"    out_v.x = CIEL;                                                           \n"
"    out_v.y = CIEa;                                                           \n"
"    out_v.z = CIEb;                                                           \n"
"    out_v.w = in_v.w;                                                         \n"
"                                                                              \n"
"    output[y*width+x] = out_v;                                                \n"
"}                                                                             \n"
;
