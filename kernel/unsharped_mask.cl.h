static const char* unsharped_mask_cl_source =
"const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE |                       \n"
"                          CLK_ADDRESS_CLAMP |                                 \n"
"                          CLK_FILTER_NEAREST;                                 \n"
"                                                                              \n"
"kernel void blurx(read_only  image2d_t in,                                    \n"
"                  write_only image2d_t out,                                   \n"
"                  constant float * gmask,                                     \n"
"                  int radius)                                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v = 0.0f;                                                            \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      v += gmask[r+radius] * read_imagef(in, sampler, (int2)(x+r, y));        \n"
"    }                                                                         \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v);                                         \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void blury(read_only  image2d_t in,                                    \n"
"                  write_only image2d_t out,                                   \n"
"                  constant float * gmask,                                     \n"
"                  int radius)                                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v = 0.0f;                                                            \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      v += gmask[r+radius] * read_imagef(in, sampler, (int2)(x, y+r));        \n"
"    }                                                                         \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v);                                         \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void unsharped_mask(read_only  image2d_t in,                           \n"
"                           read_only  image2d_t blurry,                       \n"
"                           write_only image2d_t out,                          \n"
"                           float detail_thresh,                               \n"
"                           float sharpen)                                     \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 in_v = read_imagef(in, sampler, (int2)(x, y));                       \n"
"                                                                              \n"
"  float4 detail = read_imagef(blurry, sampler, (int2)(x, y)) - in_v;          \n"
"                                                                              \n"
"  float4 sharpened = sharpen * copysign(fmax(fabs(detail) - detail_thresh, 0.0f), detail) * convert_float4(detail > detail_thresh);\n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), in_v + sharpened);                          \n"
"}                                                                             \n"
;
