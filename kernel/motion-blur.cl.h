static const char* motion_blur_cl_source =
"float4 get_pixel_color(const __global float4 *in_buf,                         \n"
"                       int     width,                                         \n"
"                       int     height,                                        \n"
"                       int     x,                                             \n"
"                       int     y)                                             \n"
"{                                                                             \n"
"    int ix = clamp(x, 0, width-1);                                            \n"
"    int iy = clamp(y, 0, height-1);                                           \n"
"                                                                              \n"
"    return in_buf[iy * width + ix];                                           \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void motion_blur(__global const float4 *src_buf,                     \n"
"                          __global       float4 *dst_buf,                     \n"
"                          int     width,                                      \n"
"                          int     height,                                     \n"
"                          int     num_steps,                                  \n"
"                          float   offset_x,                                   \n"
"                          float   offset_y)                                   \n"
"{                                                                             \n"
"    int gidx = get_global_id(0);                                              \n"
"    int gidy = get_global_id(1);                                              \n"
"                                                                              \n"
"    float4 sum = 0.0f;                                                        \n"
"                                                                              \n"
"    for(int step = 0; step < num_steps; step++)                               \n"
"    {                                                                         \n"
"        float t = num_steps == 1 ? 0.0f :                                     \n"
"            step / (float)(num_steps - 1) - 0.5f;                             \n"
"                                                                              \n"
"        float xx = gidx + t * offset_x;                                       \n"
"        float yy = gidy + t * offset_y;                                       \n"
"                                                                              \n"
"        int   ix = (int)floor(xx);                                            \n"
"        int   iy = (int)floor(yy);                                            \n"
"                                                                              \n"
"        float dx = xx - floor(xx);                                            \n"
"        float dy = yy - floor(yy);                                            \n"
"                                                                              \n"
"        float4 mixy0,mixy1,pix0,pix1,pix2,pix3;                               \n"
"                                                                              \n"
"        pix0 = get_pixel_color(src_buf, width, height, ix,   iy);             \n"
"        pix1 = get_pixel_color(src_buf, width, height, ix+1, iy);             \n"
"        pix2 = get_pixel_color(src_buf, width, height, ix,   iy+1);           \n"
"        pix3 = get_pixel_color(src_buf, width, height, ix+1, iy+1);           \n"
"                                                                              \n"
"        mixy0 = dy * (pix2 - pix0) + pix0;                                    \n"
"        mixy1 = dy * (pix3 - pix1) + pix1;                                    \n"
"                                                                              \n"
"        sum  += dx * (mixy1 - mixy0) + mixy0;                                 \n"
"    }                                                                         \n"
"                                                                              \n"
"    dst_buf[gidy * width + gidx] = sum / num_steps;                           \n"
"}                                                                             \n"
;
