static const char* sift_cl_source =
"const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE |                       \n"
"                          CLK_ADDRESS_CLAMP |                                 \n"
"                          CLK_FILTER_NEAREST;                                 \n"
"                                                                              \n"
"__kernel void gray(read_only  image2d_t in,                                   \n"
"                   write_only image2d_t out)                                  \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v  = read_imagef(in, sampler, (int2)(x, y));                         \n"
"  float g = 0.299f * v.x + 0.587f * v.y + 0.114f * v.z;                       \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), (float4)(g));                               \n"
"}                                                                             \n"
"                                                                              \n"
"                                                                              \n"
"__kernel void downx(read_only  image2d_t in,                                  \n"
"                    write_only image2d_t out)                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v  =          read_imagef(in, sampler, (int2)(2*x-1, y))             \n"
"              + 3.0f * read_imagef(in, sampler, (int2)(2*x  , y))             \n"
"              +        read_imagef(in, sampler, (int2)(2*x+1, y))             \n"
"              +        read_imagef(in, sampler, (int2)(2*x+2, y));            \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v / 8.0f);                                  \n"
"}                                                                             \n"
"                                                                              \n"
"__kernel void downy(read_only  image2d_t in,                                  \n"
"                    write_only image2d_t out)                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v  =          read_imagef(in, sampler, (int2)(x, 2*y-1))             \n"
"              + 3.0f * read_imagef(in, sampler, (int2)(x, 2*y))               \n"
"              +        read_imagef(in, sampler, (int2)(x, 2*y+1))             \n"
"              +        read_imagef(in, sampler, (int2)(x, 2*y+2));            \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v / 8.0f);                                  \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void blurx(read_only  image2d_t in,                                    \n"
"                  write_only image2d_t out,                                   \n"
"                  constant float * gmask,                                     \n"
"                  int radius)                                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v = 0.0f;                                                            \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      v += gmask[r+radius] * read_imagef(in, sampler, (int2)(x+r, y));        \n"
"    }                                                                         \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v);                                         \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void blury(read_only  image2d_t in,                                    \n"
"                  write_only image2d_t out,                                   \n"
"                  constant float * gmask,                                     \n"
"                  int radius)                                                 \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v = 0.0f;                                                            \n"
"                                                                              \n"
"  for(int r=-radius; r <= radius; r++)                                        \n"
"    {                                                                         \n"
"      v += gmask[r+radius] * read_imagef(in, sampler, (int2)(x, y+r));        \n"
"    }                                                                         \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v);                                         \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void dog(read_only  image2d_t g1,                                      \n"
"                read_only  image2d_t g2,                                      \n"
"                write_only image2d_t out)                                     \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float4 v  =   read_imagef(g2, sampler, (int2)(x, y))                        \n"
"              - read_imagef(g1, sampler, (int2)(x, y));                       \n"
"                                                                              \n"
"  write_imagef(out, (int2)(x, y), v);                                         \n"
"}                                                                             \n"
"                                                                              \n"
"kernel void isvalid(read_only  image2d_t dog_p,                               \n"
"                    read_only  image2d_t dog_c,                               \n"
"                    read_only  image2d_t dog_n,                               \n"
"                    global uchar * isvalid,                                   \n"
"                    float curv_thr,                                           \n"
"                    float contr_thr,                                          \n"
"                    int o,                                                    \n"
"                    int intervals)                                            \n"
"{                                                                             \n"
"  const int x = get_global_id(0);                                             \n"
"  const int y = get_global_id(1);                                             \n"
"                                                                              \n"
"  float v[3][3][3];                                                           \n"
"                                                                              \n"
"  for (int ry=-1; ry<=1; ry++)                                                \n"
"    for (int rx=-1; rx<=1; rx++)                                              \n"
"      {                                                                       \n"
"        v[0][ry+1][rx+1] = read_imagef(dog_p, sampler, (int2)(x+rx, y+ry)).x; \n"
"        v[1][ry+1][rx+1] = read_imagef(dog_c, sampler, (int2)(x+rx, y+ry)).x; \n"
"        v[2][ry+1][rx+1] = read_imagef(dog_n, sampler, (int2)(x+rx, y+ry)).x; \n"
"      }                                                                       \n"
"                                                                              \n"
"  const float vcc = v[1][1][1];                                               \n"
"                                                                              \n"
"  float dmax = -FLT_MAX;                                                      \n"
"  float dmin =  FLT_MAX;                                                      \n"
"                                                                              \n"
"  for (int ry=0; ry<=2; ry++)                                                 \n"
"    for (int rx=0; rx<=2; rx++)                                               \n"
"      {                                                                       \n"
"        dmax = fmax(dmax,                                                     \n"
"               fmax(v[0][ry][rx],                                             \n"
"               fmax(v[1][ry][rx],                                             \n"
"                    v[2][ry][rx])));                                          \n"
"                                                                              \n"
"        dmin = fmin(dmin,                                                     \n"
"               fmin(v[0][ry][rx],                                             \n"
"               fmin(v[1][ry][rx],                                             \n"
"                    v[2][ry][rx])));                                          \n"
"      }                                                                       \n"
"                                                                              \n"
"  float prelim_contr_thr = 0.5f * contr_thr / intervals;                      \n"
"                                                                              \n"
"  bool is_extremum = ((fabs(vcc) > prelim_contr_thr) &&                       \n"
"                      ((vcc <= 0.0f && vcc == dmin) ||                        \n"
"                       (vcc >  0.0f && vcc == dmax)));                        \n"
"                                                                              \n"
"  const float dxx = v[1][1][2] + v[1][1][0] - 2.0f * vcc;                     \n"
"  const float dyy = v[1][2][1] + v[1][0][1] - 2.0f * vcc;                     \n"
"  const float dss = v[2][1][1] + v[0][1][1] - 2.0f * vcc;                     \n"
"  const float dxy = ( v[1][2][2] - v[1][2][0] - v[1][0][2] + v[1][0][0] ) / 4.0f;\n"
"  const float dxs = ( v[2][1][2] - v[2][1][0] - v[0][1][2] + v[0][1][0] ) / 4.0f;\n"
"  const float dys = ( v[2][2][1] - v[2][0][1] - v[0][2][1] + v[0][0][1] ) / 4.0f;\n"
"                                                                              \n"
"  float pc_det = dxx * dyy - 2.0f * dxy;                                      \n"
"  float pc_tr = dxx + dyy;                                                    \n"
"                                                                              \n"
"  float invdet = 1.0f/(  ( dxx * (dyy * dss - dys * dys) )                    \n"
"                       - ( dxy * (dxy * dss - dys * dxs) )                    \n"
"                       + ( dxs * (dxy * dys - dyy * dxs) ));                  \n"
"                                                                              \n"
"  const float inv_dxx = invdet * (dyy * dss - dys * dys);                     \n"
"  const float inv_dyy = invdet * (dxx * dss - dxs * dxs);                     \n"
"  const float inv_dss = invdet * (dxx * dyy - dxy * dxy);                     \n"
"  const float inv_dxy = invdet * (dxs * dys - dxy * dss);                     \n"
"  const float inv_dxs = invdet * (dxy * dys - dxs * dyy);                     \n"
"  const float inv_dys = invdet * (dxy * dxs - dxx * dys);                     \n"
"                                                                              \n"
"  const float dx = (v[1][1][2] - v[1][1][0]) / 2.0f;                          \n"
"  const float dy = (v[1][2][1] - v[1][0][1]) / 2.0f;                          \n"
"  const float ds = (v[2][1][1] - v[0][1][1]) / 2.0f;                          \n"
"                                                                              \n"
"  const float interp_x = inv_dxx * dx + inv_dxy * dy + inv_dxs * ds;          \n"
"  const float interp_y = inv_dxy * dx + inv_dyy * dy + inv_dys * ds;          \n"
"  const float interp_s = inv_dxs * dx + inv_dys * dy + inv_dss * ds;          \n"
"                                                                              \n"
"  const float interp_contr = interp_x * dx + interp_y * dy + interp_s * ds;   \n"
"                                                                              \n"
"  bool ok = is_extremum &&                                                    \n"
"            pc_det > 0.0f;                                                    \n"
"            (pc_tr * pc_tr / pc_det < ( curv_thr + 1.0f )*( curv_thr + 1.0f ) / curv_thr) &&\n"
"            fabs(interp_contr) > contr_thr / intervals &&                     \n"
"            dx < 1.0f &&                                                      \n"
"            dy < 1.0f &&                                                      \n"
"            ds < 1.0f;                                                        \n"
"                                                                              \n"
"  int off = y * get_global_size(0) * (1 << o) + x * (1 << o);                 \n"
"                                                                              \n"
"  if (ok) isvalid[off] = 1;                                                   \n"
"}                                                                             \n"
;
